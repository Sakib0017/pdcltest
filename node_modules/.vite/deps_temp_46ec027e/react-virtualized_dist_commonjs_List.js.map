{
  "version": 3,
  "sources": ["../../@babel/runtime/helpers/extends.js", "../../clsx/dist/clsx.m.js", "../../react-virtualized/dist/commonjs/Grid/utils/calculateSizeAndPositionDataAndUpdateScrollOffset.js", "../../@babel/runtime/helpers/objectWithoutPropertiesLoose.js", "../../@babel/runtime/helpers/objectWithoutProperties.js", "../../react-virtualized/dist/commonjs/Grid/types.js", "../../react-virtualized/dist/commonjs/Grid/utils/CellSizeAndPositionManager.js", "../../react-virtualized/dist/commonjs/Grid/utils/maxElementSize.js", "../../react-virtualized/dist/commonjs/Grid/utils/ScalingCellSizeAndPositionManager.js", "../../react-virtualized/dist/commonjs/utils/createCallbackMemoizer.js", "../../react-virtualized/dist/commonjs/Grid/defaultOverscanIndicesGetter.js", "../../react-virtualized/dist/commonjs/Grid/utils/updateScrollIndexHelper.js", "../../react-virtualized/dist/commonjs/Grid/defaultCellRangeRenderer.js", "../../dom-helpers/esm/canUseDOM.js", "../../dom-helpers/esm/scrollbarSize.js", "../../react-lifecycles-compat/react-lifecycles-compat.es.js", "../../react-virtualized/dist/commonjs/utils/animationFrame.js", "../../react-virtualized/dist/commonjs/utils/requestAnimationTimeout.js", "../../react-virtualized/dist/commonjs/Grid/Grid.js", "../../react-virtualized/dist/commonjs/Grid/accessibilityOverscanIndicesGetter.js", "../../react-virtualized/dist/commonjs/Grid/index.js", "../../react-virtualized/dist/commonjs/List/types.js", "../../react-virtualized/dist/commonjs/List/List.js", "../../react-virtualized/dist/commonjs/List/index.js"],
  "sourcesContent": ["function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = calculateSizeAndPositionDataAndUpdateScrollOffset;\n\n/**\n * Helper method that determines when to recalculate row or column metadata.\n */\nfunction calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {\n  var cellCount = _ref.cellCount,\n      cellSize = _ref.cellSize,\n      computeMetadataCallback = _ref.computeMetadataCallback,\n      computeMetadataCallbackProps = _ref.computeMetadataCallbackProps,\n      nextCellsCount = _ref.nextCellsCount,\n      nextCellSize = _ref.nextCellSize,\n      nextScrollToIndex = _ref.nextScrollToIndex,\n      scrollToIndex = _ref.scrollToIndex,\n      updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex;\n\n  // Don't compare cell sizes if they are functions because inline functions would cause infinite loops.\n  // In that event users should use the manual recompute methods to inform of changes.\n  if (cellCount !== nextCellsCount || (typeof cellSize === 'number' || typeof nextCellSize === 'number') && cellSize !== nextCellSize) {\n    computeMetadataCallback(computeMetadataCallbackProps); // Updated cell metadata may have hidden the previous scrolled-to item.\n    // In this case we should also update the scrollTop to ensure it stays visible.\n\n    if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {\n      updateScrollOffsetForScrollToIndex();\n    }\n  }\n}", "function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose.js\");\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nmodule.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bpfrpt_proptype_VisibleCellRange = exports.bpfrpt_proptype_Alignment = exports.bpfrpt_proptype_OverscanIndicesGetter = exports.bpfrpt_proptype_OverscanIndices = exports.bpfrpt_proptype_OverscanIndicesGetterParams = exports.bpfrpt_proptype_RenderedSection = exports.bpfrpt_proptype_ScrollbarPresenceChange = exports.bpfrpt_proptype_Scroll = exports.bpfrpt_proptype_NoContentRenderer = exports.bpfrpt_proptype_CellSize = exports.bpfrpt_proptype_CellSizeGetter = exports.bpfrpt_proptype_CellRangeRenderer = exports.bpfrpt_proptype_CellRangeRendererParams = exports.bpfrpt_proptype_StyleCache = exports.bpfrpt_proptype_CellCache = exports.bpfrpt_proptype_CellRenderer = exports.bpfrpt_proptype_CellRendererParams = exports.bpfrpt_proptype_CellPosition = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _ScalingCellSizeAndPositionManager = _interopRequireDefault(require(\"./utils/ScalingCellSizeAndPositionManager\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar bpfrpt_proptype_CellPosition = process.env.NODE_ENV === 'production' ? null : {\n  \"columnIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowIndex\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_CellPosition = bpfrpt_proptype_CellPosition;\nvar bpfrpt_proptype_CellRendererParams = process.env.NODE_ENV === 'production' ? null : {\n  \"columnIndex\": _propTypes[\"default\"].number.isRequired,\n  \"isScrolling\": _propTypes[\"default\"].bool.isRequired,\n  \"isVisible\": _propTypes[\"default\"].bool.isRequired,\n  \"key\": _propTypes[\"default\"].string.isRequired,\n  \"parent\": _propTypes[\"default\"].object.isRequired,\n  \"rowIndex\": _propTypes[\"default\"].number.isRequired,\n  \"style\": _propTypes[\"default\"].object.isRequired\n};\nexports.bpfrpt_proptype_CellRendererParams = bpfrpt_proptype_CellRendererParams;\nvar bpfrpt_proptype_CellRenderer = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_CellRenderer = bpfrpt_proptype_CellRenderer;\nvar bpfrpt_proptype_CellCache = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].objectOf(_propTypes[\"default\"].node.isRequired);\nexports.bpfrpt_proptype_CellCache = bpfrpt_proptype_CellCache;\nvar bpfrpt_proptype_StyleCache = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].objectOf(_propTypes[\"default\"].object.isRequired);\nexports.bpfrpt_proptype_StyleCache = bpfrpt_proptype_StyleCache;\nvar bpfrpt_proptype_CellRangeRendererParams = process.env.NODE_ENV === 'production' ? null : {\n  \"cellCache\": _propTypes[\"default\"].objectOf(_propTypes[\"default\"].node.isRequired).isRequired,\n  \"cellRenderer\": _propTypes[\"default\"].func.isRequired,\n  \"columnSizeAndPositionManager\": function columnSizeAndPositionManager() {\n    return (typeof _ScalingCellSizeAndPositionManager[\"default\"] === \"function\" ? _propTypes[\"default\"].instanceOf(_ScalingCellSizeAndPositionManager[\"default\"]).isRequired : _propTypes[\"default\"].any.isRequired).apply(this, arguments);\n  },\n  \"columnStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"columnStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"deferredMeasurementCache\": _propTypes[\"default\"].object,\n  \"horizontalOffsetAdjustment\": _propTypes[\"default\"].number.isRequired,\n  \"isScrolling\": _propTypes[\"default\"].bool.isRequired,\n  \"isScrollingOptOut\": _propTypes[\"default\"].bool.isRequired,\n  \"parent\": _propTypes[\"default\"].object.isRequired,\n  \"rowSizeAndPositionManager\": function rowSizeAndPositionManager() {\n    return (typeof _ScalingCellSizeAndPositionManager[\"default\"] === \"function\" ? _propTypes[\"default\"].instanceOf(_ScalingCellSizeAndPositionManager[\"default\"]).isRequired : _propTypes[\"default\"].any.isRequired).apply(this, arguments);\n  },\n  \"rowStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"scrollLeft\": _propTypes[\"default\"].number.isRequired,\n  \"scrollTop\": _propTypes[\"default\"].number.isRequired,\n  \"styleCache\": _propTypes[\"default\"].objectOf(_propTypes[\"default\"].object.isRequired).isRequired,\n  \"verticalOffsetAdjustment\": _propTypes[\"default\"].number.isRequired,\n  \"visibleColumnIndices\": _propTypes[\"default\"].object.isRequired,\n  \"visibleRowIndices\": _propTypes[\"default\"].object.isRequired\n};\nexports.bpfrpt_proptype_CellRangeRendererParams = bpfrpt_proptype_CellRangeRendererParams;\nvar bpfrpt_proptype_CellRangeRenderer = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_CellRangeRenderer = bpfrpt_proptype_CellRangeRenderer;\nvar bpfrpt_proptype_CellSizeGetter = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_CellSizeGetter = bpfrpt_proptype_CellSizeGetter;\nvar bpfrpt_proptype_CellSize = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].func, _propTypes[\"default\"].number]);\nexports.bpfrpt_proptype_CellSize = bpfrpt_proptype_CellSize;\nvar bpfrpt_proptype_NoContentRenderer = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_NoContentRenderer = bpfrpt_proptype_NoContentRenderer;\nvar bpfrpt_proptype_Scroll = process.env.NODE_ENV === 'production' ? null : {\n  \"clientHeight\": _propTypes[\"default\"].number.isRequired,\n  \"clientWidth\": _propTypes[\"default\"].number.isRequired,\n  \"scrollHeight\": _propTypes[\"default\"].number.isRequired,\n  \"scrollLeft\": _propTypes[\"default\"].number.isRequired,\n  \"scrollTop\": _propTypes[\"default\"].number.isRequired,\n  \"scrollWidth\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_Scroll = bpfrpt_proptype_Scroll;\nvar bpfrpt_proptype_ScrollbarPresenceChange = process.env.NODE_ENV === 'production' ? null : {\n  \"horizontal\": _propTypes[\"default\"].bool.isRequired,\n  \"vertical\": _propTypes[\"default\"].bool.isRequired,\n  \"size\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_ScrollbarPresenceChange = bpfrpt_proptype_ScrollbarPresenceChange;\nvar bpfrpt_proptype_RenderedSection = process.env.NODE_ENV === 'production' ? null : {\n  \"columnOverscanStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"columnOverscanStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"columnStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"columnStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowOverscanStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowOverscanStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"rowStopIndex\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_RenderedSection = bpfrpt_proptype_RenderedSection;\nvar bpfrpt_proptype_OverscanIndicesGetterParams = process.env.NODE_ENV === 'production' ? null : {\n  // One of SCROLL_DIRECTION_HORIZONTAL or SCROLL_DIRECTION_VERTICAL\n  \"direction\": _propTypes[\"default\"].oneOf([\"horizontal\", \"vertical\"]).isRequired,\n  // One of SCROLL_DIRECTION_BACKWARD or SCROLL_DIRECTION_FORWARD\n  \"scrollDirection\": _propTypes[\"default\"].oneOf([-1, 1]).isRequired,\n  // Number of rows or columns in the current axis\n  \"cellCount\": _propTypes[\"default\"].number.isRequired,\n  // Maximum number of cells to over-render in either direction\n  \"overscanCellsCount\": _propTypes[\"default\"].number.isRequired,\n  // Begin of range of visible cells\n  \"startIndex\": _propTypes[\"default\"].number.isRequired,\n  // End of range of visible cells\n  \"stopIndex\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_OverscanIndicesGetterParams = bpfrpt_proptype_OverscanIndicesGetterParams;\nvar bpfrpt_proptype_OverscanIndices = process.env.NODE_ENV === 'production' ? null : {\n  \"overscanStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"overscanStopIndex\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_OverscanIndices = bpfrpt_proptype_OverscanIndices;\nvar bpfrpt_proptype_OverscanIndicesGetter = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_OverscanIndicesGetter = bpfrpt_proptype_OverscanIndicesGetter;\nvar bpfrpt_proptype_Alignment = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].oneOf([\"auto\", \"end\", \"start\", \"center\"]);\nexports.bpfrpt_proptype_Alignment = bpfrpt_proptype_Alignment;\nvar bpfrpt_proptype_VisibleCellRange = process.env.NODE_ENV === 'production' ? null : {\n  \"start\": _propTypes[\"default\"].number,\n  \"stop\": _propTypes[\"default\"].number\n};\nexports.bpfrpt_proptype_VisibleCellRange = bpfrpt_proptype_VisibleCellRange;", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _types = require(\"../types\");\n\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\nvar CellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n  // Used in deferred mode to track which cells have been queued for measurement.\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n        cellSizeGetter = _ref.cellSizeGetter,\n        estimatedCellSize = _ref.estimatedCellSize;\n    (0, _classCallCheck2[\"default\"])(this, CellSizeAndPositionManager);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeAndPositionData\", {});\n    (0, _defineProperty2[\"default\"])(this, \"_lastMeasuredIndex\", -1);\n    (0, _defineProperty2[\"default\"])(this, \"_lastBatchedIndex\", -1);\n    (0, _defineProperty2[\"default\"])(this, \"_cellCount\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeGetter\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_estimatedCellSize\", void 0);\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  }\n\n  (0, _createClass2[\"default\"])(CellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n          estimatedCellSize = _ref2.estimatedCellSize,\n          cellSizeGetter = _ref2.cellSizeGetter;\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error(\"Requested index \".concat(index, \" is outside of range 0..\").concat(this._cellCount));\n      }\n\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n        var offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var size = this._cellSizeGetter({\n            index: i\n          }); // undefined or NaN probably means a logic error in the size getter.\n          // null means we're using CellMeasurer and haven't yet measured a given index.\n\n\n          if (size === undefined || isNaN(size)) {\n            throw Error(\"Invalid size returned for cell \".concat(i, \" of value \").concat(size));\n          } else if (size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: 0\n            };\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: size\n            };\n            offset += size;\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container's current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      if (containerSize <= 0) {\n        return 0;\n      }\n\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n      var idealOffset;\n\n      switch (align) {\n        case 'start':\n          idealOffset = maxOffset;\n          break;\n\n        case 'end':\n          idealOffset = minOffset;\n          break;\n\n        case 'center':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n\n      var totalSize = this.getTotalSize();\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n          offset = params.offset;\n      var totalSize = this.getTotalSize();\n\n      if (totalSize === 0) {\n        return {};\n      }\n\n      var maxOffset = offset + containerSize;\n\n      var start = this._findNearestCell(offset);\n\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n      var stop = start;\n\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: \"_binarySearch\",\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n\n        if (currentOffset === offset) {\n          return middle;\n        } else if (currentOffset < offset) {\n          low = middle + 1;\n        } else if (currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"_exponentialSearch\",\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n\n  }, {\n    key: \"_findNearestCell\",\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error(\"Invalid offset \".concat(offset, \" specified\"));\n      } // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n\n\n      offset = Math.max(0, offset);\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we've already measured cells within this range just use a binary search as it's faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n  return CellSizeAndPositionManager;\n}();\n\nexports[\"default\"] = CellSizeAndPositionManager;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMaxElementSize = void 0;\nvar DEFAULT_MAX_ELEMENT_SIZE = 1500000;\nvar CHROME_MAX_ELEMENT_SIZE = 1.67771e7;\n\nvar isBrowser = function isBrowser() {\n  return typeof window !== 'undefined';\n};\n\nvar isChrome = function isChrome() {\n  return !!window.chrome;\n};\n\nvar getMaxElementSize = function getMaxElementSize() {\n  if (isBrowser()) {\n    if (isChrome()) {\n      return CHROME_MAX_ELEMENT_SIZE;\n    }\n  }\n\n  return DEFAULT_MAX_ELEMENT_SIZE;\n};\n\nexports.getMaxElementSize = getMaxElementSize;", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _CellSizeAndPositionManager = _interopRequireDefault(require(\"./CellSizeAndPositionManager\"));\n\nvar _maxElementSize = require(\"./maxElementSize.js\");\n\nvar _types = require(\"../types\");\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\nvar ScalingCellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === void 0 ? (0, _maxElementSize.getMaxElementSize)() : _ref$maxScrollSize,\n        params = (0, _objectWithoutProperties2[\"default\"])(_ref, [\"maxScrollSize\"]);\n    (0, _classCallCheck2[\"default\"])(this, ScalingCellSizeAndPositionManager);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeAndPositionManager\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_maxScrollSize\", void 0);\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new _CellSizeAndPositionManager[\"default\"](params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  (0, _createClass2[\"default\"])(ScalingCellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: \"_getOffsetPercentage\",\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: \"_offsetToSafeOffset\",\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: \"_safeOffsetToOffset\",\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexports[\"default\"] = ScalingCellSizeAndPositionManager;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = createCallbackMemoizer;\n\n/**\n * Helper utility that updates the specified callback whenever any of the specified indices have changed.\n */\nfunction createCallbackMemoizer() {\n  var requireAllKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var cachedIndices = {};\n  return function (_ref) {\n    var callback = _ref.callback,\n        indices = _ref.indices;\n    var keys = Object.keys(indices);\n    var allInitialized = !requireAllKeys || keys.every(function (key) {\n      var value = indices[key];\n      return Array.isArray(value) ? value.length > 0 : value >= 0;\n    });\n    var indexChanged = keys.length !== Object.keys(cachedIndices).length || keys.some(function (key) {\n      var cachedValue = cachedIndices[key];\n      var value = indices[key];\n      return Array.isArray(value) ? cachedValue.join(',') !== value.join(',') : cachedValue !== value;\n    });\n    cachedIndices = indices;\n\n    if (allInitialized && indexChanged) {\n      callback(indices);\n    }\n  };\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = defaultOverscanIndicesGetter;\nexports.SCROLL_DIRECTION_VERTICAL = exports.SCROLL_DIRECTION_HORIZONTAL = exports.SCROLL_DIRECTION_FORWARD = exports.SCROLL_DIRECTION_BACKWARD = void 0;\n\nvar _types = require(\"./types\");\n\nvar SCROLL_DIRECTION_BACKWARD = -1;\nexports.SCROLL_DIRECTION_BACKWARD = SCROLL_DIRECTION_BACKWARD;\nvar SCROLL_DIRECTION_FORWARD = 1;\nexports.SCROLL_DIRECTION_FORWARD = SCROLL_DIRECTION_FORWARD;\nvar SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexports.SCROLL_DIRECTION_HORIZONTAL = SCROLL_DIRECTION_HORIZONTAL;\nvar SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexports.SCROLL_DIRECTION_VERTICAL = SCROLL_DIRECTION_VERTICAL;\n\nfunction defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex)\n    };\n  }\n}", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = updateScrollIndexHelper;\n\nvar _ScalingCellSizeAndPositionManager = _interopRequireDefault(require(\"./ScalingCellSizeAndPositionManager.js\"));\n\nvar _types = require(\"../types\");\n\nfunction updateScrollIndexHelper(_ref) {\n  var cellSize = _ref.cellSize,\n      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,\n      previousCellsCount = _ref.previousCellsCount,\n      previousCellSize = _ref.previousCellSize,\n      previousScrollToAlignment = _ref.previousScrollToAlignment,\n      previousScrollToIndex = _ref.previousScrollToIndex,\n      previousSize = _ref.previousSize,\n      scrollOffset = _ref.scrollOffset,\n      scrollToAlignment = _ref.scrollToAlignment,\n      scrollToIndex = _ref.scrollToIndex,\n      size = _ref.size,\n      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,\n      updateScrollIndexCallback = _ref.updateScrollIndexCallback;\n  var cellCount = cellSizeAndPositionManager.getCellCount();\n  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;\n  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize; // If we have a new scroll target OR if height/row-height has changed,\n  // We should ensure that the scroll target is visible.\n\n  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {\n    updateScrollIndexCallback(scrollToIndex); // If we don't have a selected item but list size or number of children have decreased,\n    // Make sure we aren't scrolled too far past the current content.\n  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {\n    // We need to ensure that the current scroll offset is still within the collection's range.\n    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.\n    // Just check to make sure we're still okay.\n    // Only adjust the scroll position if we've scrolled below the last set of rows.\n    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {\n      updateScrollIndexCallback(cellCount - 1);\n    }\n  }\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = defaultCellRangeRenderer;\n\nvar _types = require(\"./types\");\n\n/**\n * Default implementation of cellRangeRenderer used by Grid.\n * This renderer supports cell-caching while the user is scrolling.\n */\nfunction defaultCellRangeRenderer(_ref) {\n  var cellCache = _ref.cellCache,\n      cellRenderer = _ref.cellRenderer,\n      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,\n      columnStartIndex = _ref.columnStartIndex,\n      columnStopIndex = _ref.columnStopIndex,\n      deferredMeasurementCache = _ref.deferredMeasurementCache,\n      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,\n      isScrolling = _ref.isScrolling,\n      isScrollingOptOut = _ref.isScrollingOptOut,\n      parent = _ref.parent,\n      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,\n      rowStartIndex = _ref.rowStartIndex,\n      rowStopIndex = _ref.rowStopIndex,\n      styleCache = _ref.styleCache,\n      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,\n      visibleColumnIndices = _ref.visibleColumnIndices,\n      visibleRowIndices = _ref.visibleRowIndices;\n  var renderedCells = []; // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).\n  // User cannot scroll beyond these size limitations.\n  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.\n  // We should never cache styles for compressed offsets though as this can lead to bugs.\n  // See issue #576 for more.\n\n  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();\n  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;\n\n  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);\n\n    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);\n      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;\n      var key = \"\".concat(rowIndex, \"-\").concat(columnIndex);\n      var style = void 0; // Cache style objects so shallow-compare doesn't re-render unnecessarily.\n\n      if (canCacheStyle && styleCache[key]) {\n        style = styleCache[key];\n      } else {\n        // In deferred mode, cells will be initially rendered before we know their size.\n        // Don't interfere with CellMeasurer's measurements by setting an invalid size.\n        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {\n          // Position not-yet-measured cells at top/left 0,0,\n          // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.\n          // Positioning them further to the right/bottom influences their measured size.\n          style = {\n            height: 'auto',\n            left: 0,\n            position: 'absolute',\n            top: 0,\n            width: 'auto'\n          };\n        } else {\n          style = {\n            height: rowDatum.size,\n            left: columnDatum.offset + horizontalOffsetAdjustment,\n            position: 'absolute',\n            top: rowDatum.offset + verticalOffsetAdjustment,\n            width: columnDatum.size\n          };\n          styleCache[key] = style;\n        }\n      }\n\n      var cellRendererParams = {\n        columnIndex: columnIndex,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent,\n        rowIndex: rowIndex,\n        style: style\n      };\n      var renderedCell = void 0; // Avoid re-creating cells while scrolling.\n      // This can lead to the same cell being created many times and can cause performance issues for \"heavy\" cells.\n      // If a scroll is in progress- cache and reuse cells.\n      // This cache will be thrown away once scrolling completes.\n      // However if we are scaling scroll positions and sizes, we should also avoid caching.\n      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.\n      // For more info refer to issue #395\n      //\n      // If isScrollingOptOut is specified, we always cache cells.\n      // For more info refer to issue #1028\n\n      if ((isScrollingOptOut || isScrolling) && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {\n        if (!cellCache[key]) {\n          cellCache[key] = cellRenderer(cellRendererParams);\n        }\n\n        renderedCell = cellCache[key]; // If the user is no longer scrolling, don't cache cells.\n        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.\n      } else {\n        renderedCell = cellRenderer(cellRendererParams);\n      }\n\n      if (renderedCell == null || renderedCell === false) {\n        continue;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        warnAboutMissingStyle(parent, renderedCell);\n      }\n\n      renderedCells.push(renderedCell);\n    }\n  }\n\n  return renderedCells;\n}\n\nfunction warnAboutMissingStyle(parent, renderedCell) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (renderedCell) {\n      // If the direct child is a CellMeasurer, then we should check its child\n      // See issue #611\n      if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {\n        renderedCell = renderedCell.props.children;\n      }\n\n      if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {\n        parent.__warnedAboutMissingStyle = true;\n        console.warn('Rendered cell should include style property for positioning.');\n      }\n    }\n  }\n}", "export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);", "import canUseDOM from './canUseDOM';\nvar size;\nexport default function scrollbarSize(recalc) {\n  if (!size && size !== 0 || recalc) {\n    if (canUseDOM) {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.top = '-9999px';\n      scrollDiv.style.width = '50px';\n      scrollDiv.style.height = '50px';\n      scrollDiv.style.overflow = 'scroll';\n      document.body.appendChild(scrollDiv);\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n    }\n  }\n\n  return size;\n}", "/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding \"this\" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== 'function' &&\n    typeof prototype.getSnapshotBeforeUpdate !== 'function'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === 'function'\n        ? 'getDerivedStateFromProps()'\n        : 'getSnapshotBeforeUpdate()';\n\n    throw Error(\n      'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n        componentName +\n        ' uses ' +\n        newApiName +\n        ' but also contains the following legacy lifecycles:' +\n        (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n        (foundWillReceivePropsName !== null\n          ? '\\n  ' + foundWillReceivePropsName\n          : '') +\n        (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n        '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n        'https://fb.me/react-async-component-lifecycle-hooks'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error(\n        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.caf = exports.raf = void 0;\n// Properly handle server-side rendering.\nvar win;\n\nif (typeof window !== 'undefined') {\n  win = window;\n} else if (typeof self !== 'undefined') {\n  win = self;\n} else {\n  win = {};\n} // requestAnimationFrame() shim by Paul Irish\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n\n\nvar request = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (callback) {\n  return win.setTimeout(callback, 1000 / 60);\n};\n\nvar cancel = win.cancelAnimationFrame || win.webkitCancelAnimationFrame || win.mozCancelAnimationFrame || win.oCancelAnimationFrame || win.msCancelAnimationFrame || function (id) {\n  win.clearTimeout(id);\n};\n\nvar raf = request;\nexports.raf = raf;\nvar caf = cancel;\nexports.caf = caf;", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bpfrpt_proptype_AnimationTimeoutId = exports.requestAnimationTimeout = exports.cancelAnimationTimeout = void 0;\n\nvar _animationFrame = require(\"./animationFrame\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar bpfrpt_proptype_AnimationTimeoutId = process.env.NODE_ENV === 'production' ? null : {\n  \"id\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_AnimationTimeoutId = bpfrpt_proptype_AnimationTimeoutId;\n\nvar cancelAnimationTimeout = function cancelAnimationTimeout(frame) {\n  return (0, _animationFrame.caf)(frame.id);\n};\n/**\n * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.\n * When the delay time has been reached the function you're timing out will be called.\n *\n * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)\n */\n\n\nexports.cancelAnimationTimeout = cancelAnimationTimeout;\n\nvar requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {\n  var start; // wait for end of processing current event handler, because event handler may be long\n\n  Promise.resolve().then(function () {\n    start = Date.now();\n  });\n\n  var timeout = function timeout() {\n    if (Date.now() - start >= delay) {\n      callback.call();\n    } else {\n      frame.id = (0, _animationFrame.raf)(timeout);\n    }\n  };\n\n  var frame = {\n    id: (0, _animationFrame.raf)(timeout)\n  };\n  return frame;\n};\n\nexports.requestAnimationTimeout = requestAnimationTimeout;", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _calculateSizeAndPositionDataAndUpdateScrollOffset = _interopRequireDefault(require(\"./utils/calculateSizeAndPositionDataAndUpdateScrollOffset\"));\n\nvar _ScalingCellSizeAndPositionManager = _interopRequireDefault(require(\"./utils/ScalingCellSizeAndPositionManager\"));\n\nvar _createCallbackMemoizer = _interopRequireDefault(require(\"../utils/createCallbackMemoizer\"));\n\nvar _defaultOverscanIndicesGetter = _interopRequireWildcard(require(\"./defaultOverscanIndicesGetter\"));\n\nvar _updateScrollIndexHelper = _interopRequireDefault(require(\"./utils/updateScrollIndexHelper\"));\n\nvar _defaultCellRangeRenderer = _interopRequireDefault(require(\"./defaultCellRangeRenderer\"));\n\nvar _scrollbarSize = _interopRequireDefault(require(\"dom-helpers/scrollbarSize\"));\n\nvar _reactLifecyclesCompat = require(\"react-lifecycles-compat\");\n\nvar _requestAnimationTimeout = require(\"../utils/requestAnimationTimeout\");\n\nvar _types = require(\"./types\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _class, _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\nvar DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n/**\n * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\n\nexports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = DEFAULT_SCROLLING_RESET_TIME_INTERVAL;\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n\nvar renderNull = function renderNull() {\n  return null;\n};\n\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\nvar Grid = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  (0, _inherits2[\"default\"])(Grid, _React$PureComponent);\n\n  // Invokes onSectionRendered callback only when start/stop row or column indices change\n  function Grid(props) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, Grid);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(Grid).call(this, props));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onGridRenderedMemoizer\", (0, _createCallbackMemoizer[\"default\"])());\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onScrollMemoizer\", (0, _createCallbackMemoizer[\"default\"])(false));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_deferredInvalidateColumnIndex\", null);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_deferredInvalidateRowIndex\", null);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_recomputeScrollLeftFlag\", false);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_recomputeScrollTopFlag\", false);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_horizontalScrollBarSize\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_verticalScrollBarSize\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_scrollbarPresenceChanged\", false);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_scrollingContainer\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_childrenToDisplay\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_columnStartIndex\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_columnStopIndex\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_rowStartIndex\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_rowStopIndex\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_renderedColumnStartIndex\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_renderedColumnStopIndex\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_renderedRowStartIndex\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_renderedRowStopIndex\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_initialScrollTop\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_initialScrollLeft\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_disablePointerEventsTimeoutId\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_styleCache\", {});\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_cellCache\", {});\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_debounceScrollEndedCallback\", function () {\n      _this._disablePointerEventsTimeoutId = null; // isScrolling is used to determine if we reset styleCache\n\n      _this.setState({\n        isScrolling: false,\n        needToResetStyleCache: false\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_invokeOnGridRenderedHelper\", function () {\n      var onSectionRendered = _this.props.onSectionRendered;\n\n      _this._onGridRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          columnOverscanStartIndex: _this._columnStartIndex,\n          columnOverscanStopIndex: _this._columnStopIndex,\n          columnStartIndex: _this._renderedColumnStartIndex,\n          columnStopIndex: _this._renderedColumnStopIndex,\n          rowOverscanStartIndex: _this._rowStartIndex,\n          rowOverscanStopIndex: _this._rowStopIndex,\n          rowStartIndex: _this._renderedRowStartIndex,\n          rowStopIndex: _this._renderedRowStopIndex\n        }\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_setScrollingContainerRef\", function (ref) {\n      _this._scrollingContainer = ref;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onScroll\", function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target === _this._scrollingContainer) {\n        _this.handleScrollEvent(event.target);\n      }\n    });\n    var columnSizeAndPositionManager = new _ScalingCellSizeAndPositionManager[\"default\"]({\n      cellCount: props.columnCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.columnWidth)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedColumnSize(props)\n    });\n    var rowSizeAndPositionManager = new _ScalingCellSizeAndPositionManager[\"default\"]({\n      cellCount: props.rowCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.rowHeight)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedRowSize(props)\n    });\n    _this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager: columnSizeAndPositionManager,\n        rowSizeAndPositionManager: rowSizeAndPositionManager,\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD,\n      scrollLeft: 0,\n      scrollTop: 0,\n      scrollPositionChangeReason: null,\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);\n    }\n\n    if (props.scrollToColumn > 0) {\n      _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n\n\n  (0, _createClass2[\"default\"])(Grid, [{\n    key: \"getOffsetForCell\",\n    value: function getOffsetForCell() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$alignment = _ref.alignment,\n          alignment = _ref$alignment === void 0 ? this.props.scrollToAlignment : _ref$alignment,\n          _ref$columnIndex = _ref.columnIndex,\n          columnIndex = _ref$columnIndex === void 0 ? this.props.scrollToColumn : _ref$columnIndex,\n          _ref$rowIndex = _ref.rowIndex,\n          rowIndex = _ref$rowIndex === void 0 ? this.props.scrollToRow : _ref$rowIndex;\n\n      var offsetProps = _objectSpread({}, this.props, {\n        scrollToAlignment: alignment,\n        scrollToColumn: columnIndex,\n        scrollToRow: rowIndex\n      });\n\n      return {\n        scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n        scrollTop: this._getCalculatedScrollTop(offsetProps)\n      };\n    }\n    /**\n     * Gets estimated total rows' height.\n     */\n\n  }, {\n    key: \"getTotalRowsHeight\",\n    value: function getTotalRowsHeight() {\n      return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * Gets estimated total columns' width.\n     */\n\n  }, {\n    key: \"getTotalColumnsWidth\",\n    value: function getTotalColumnsWidth() {\n      return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * This method handles a scroll event originating from an external scroll control.\n     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n     */\n\n  }, {\n    key: \"handleScrollEvent\",\n    value: function handleScrollEvent(_ref2) {\n      var _ref2$scrollLeft = _ref2.scrollLeft,\n          scrollLeftParam = _ref2$scrollLeft === void 0 ? 0 : _ref2$scrollLeft,\n          _ref2$scrollTop = _ref2.scrollTop,\n          scrollTopParam = _ref2$scrollTop === void 0 ? 0 : _ref2$scrollTop;\n\n      // On iOS, we can arrive at negative offsets by swiping past the start.\n      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n      if (scrollTopParam < 0) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n\n      this._debounceScrollEnded();\n\n      var _this$props = this.props,\n          autoHeight = _this$props.autoHeight,\n          autoWidth = _this$props.autoWidth,\n          height = _this$props.height,\n          width = _this$props.width;\n      var instanceProps = this.state.instanceProps; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n      var scrollbarSize = instanceProps.scrollbarSize;\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n        // Don't change direction for an axis unless scroll offset has changed.\n        var scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;\n        var scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;\n        var newState = {\n          isScrolling: true,\n          scrollDirectionHorizontal: scrollDirectionHorizontal,\n          scrollDirectionVertical: scrollDirectionVertical,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED\n        };\n\n        if (!autoHeight) {\n          newState.scrollTop = scrollTop;\n        }\n\n        if (!autoWidth) {\n          newState.scrollLeft = scrollLeft;\n        }\n\n        newState.needToResetStyleCache = false;\n        this.setState(newState);\n      }\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalColumnsWidth: totalColumnsWidth,\n        totalRowsHeight: totalRowsHeight\n      });\n    }\n    /**\n     * Invalidate Grid size and recompute visible cells.\n     * This is a deferred wrapper for recomputeGridSize().\n     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n     * This method is intended for advanced use-cases like CellMeasurer.\n     */\n    // @TODO (bvaughn) Add automated test coverage for this.\n\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref3) {\n      var columnIndex = _ref3.columnIndex,\n          rowIndex = _ref3.rowIndex;\n      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;\n      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;\n    }\n    /**\n     * Pre-measure all columns and rows in a Grid.\n     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n     */\n\n  }, {\n    key: \"measureAllCells\",\n    value: function measureAllCells() {\n      var _this$props2 = this.props,\n          columnCount = _this$props2.columnCount,\n          rowCount = _this$props2.rowCount;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n      instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n    }\n    /**\n     * Forced recompute of row heights and column widths.\n     * This function should be called if dynamic column or row sizes have changed but nothing else has.\n     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n     */\n\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$columnIndex = _ref4.columnIndex,\n          columnIndex = _ref4$columnIndex === void 0 ? 0 : _ref4$columnIndex,\n          _ref4$rowIndex = _ref4.rowIndex,\n          rowIndex = _ref4$rowIndex === void 0 ? 0 : _ref4$rowIndex;\n\n      var _this$props3 = this.props,\n          scrollToColumn = _this$props3.scrollToColumn,\n          scrollToRow = _this$props3.scrollToRow;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n      instanceProps.rowSizeAndPositionManager.resetCell(rowIndex); // Cell sizes may be determined by a function property.\n      // In this case the cDU handler can't know if they changed.\n      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n\n      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);\n      this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow); // Clear cell cache in case we are scrolling;\n      // Invalid row heights likely mean invalid cached content as well.\n\n      this._styleCache = {};\n      this._cellCache = {};\n      this.forceUpdate();\n    }\n    /**\n     * Ensure column and row are visible.\n     */\n\n  }, {\n    key: \"scrollToCell\",\n    value: function scrollToCell(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n      var columnCount = this.props.columnCount;\n      var props = this.props; // Don't adjust scroll offset for single-column grids (eg List, Table).\n      // This can cause a funky scroll offset because of the vertical scrollbar width.\n\n      if (columnCount > 1 && columnIndex !== undefined) {\n        this._updateScrollLeftForScrollToColumn(_objectSpread({}, props, {\n          scrollToColumn: columnIndex\n        }));\n      }\n\n      if (rowIndex !== undefined) {\n        this._updateScrollTopForScrollToRow(_objectSpread({}, props, {\n          scrollToRow: rowIndex\n        }));\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n          getScrollbarSize = _this$props4.getScrollbarSize,\n          height = _this$props4.height,\n          scrollLeft = _this$props4.scrollLeft,\n          scrollToColumn = _this$props4.scrollToColumn,\n          scrollTop = _this$props4.scrollTop,\n          scrollToRow = _this$props4.scrollToRow,\n          width = _this$props4.width;\n      var instanceProps = this.state.instanceProps; // Reset initial offsets to be ignored in browser\n\n      this._initialScrollTop = 0;\n      this._initialScrollLeft = 0; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n\n\n      if (!instanceProps.scrollbarSizeMeasured) {\n        this.setState(function (prevState) {\n          var stateUpdate = _objectSpread({}, prevState, {\n            needToResetStyleCache: false\n          });\n\n          stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n          stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n          return stateUpdate;\n        });\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {\n        var stateUpdate = Grid._getScrollToPositionStateUpdate({\n          prevState: this.state,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n\n        if (stateUpdate) {\n          stateUpdate.needToResetStyleCache = false;\n          this.setState(stateUpdate);\n        }\n      } // refs don't work in `react-test-renderer`\n\n\n      if (this._scrollingContainer) {\n        // setting the ref's scrollLeft and scrollTop.\n        // Somehow in MultiGrid the main grid doesn't trigger a update on mount.\n        if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n          this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n        }\n\n        if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n          this._scrollingContainer.scrollTop = this.state.scrollTop;\n        }\n      } // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n      // Setting a state may cause us to later thing we've updated the offce when we haven't.\n\n\n      var sizeIsBiggerThanZero = height > 0 && width > 0;\n\n      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollLeftForScrollToColumn();\n      }\n\n      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollTopForScrollToRow();\n      } // Update onRowsRendered callback\n\n\n      this._invokeOnGridRenderedHelper(); // Initialize onScroll callback\n\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n        totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n      });\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) New scroll-to-cell props have been set\n     */\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          autoHeight = _this$props5.autoHeight,\n          autoWidth = _this$props5.autoWidth,\n          columnCount = _this$props5.columnCount,\n          height = _this$props5.height,\n          rowCount = _this$props5.rowCount,\n          scrollToAlignment = _this$props5.scrollToAlignment,\n          scrollToColumn = _this$props5.scrollToColumn,\n          scrollToRow = _this$props5.scrollToRow,\n          width = _this$props5.width;\n      var _this$state = this.state,\n          scrollLeft = _this$state.scrollLeft,\n          scrollPositionChangeReason = _this$state.scrollPositionChangeReason,\n          scrollTop = _this$state.scrollTop,\n          instanceProps = _this$state.instanceProps; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // Handle edge case where column or row count has only just increased over 0.\n      // In this case we may have to restore a previously-specified scroll offset.\n      // For more info see bvaughn/react-virtualized/issues/218\n\n\n      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n\n        if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      } // Special case where the previous size was 0:\n      // In this case we don't show any windowed cells at all.\n      // So we should always recalculate offset afterwards.\n\n\n      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0; // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n\n      if (this._recomputeScrollLeftFlag) {\n        this._recomputeScrollLeftFlag = false;\n\n        this._updateScrollLeftForScrollToColumn(this.props);\n      } else {\n        (0, _updateScrollIndexHelper[\"default\"])({\n          cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          previousCellsCount: prevProps.columnCount,\n          previousCellSize: prevProps.columnWidth,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToColumn,\n          previousSize: prevProps.width,\n          scrollOffset: scrollLeft,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToColumn,\n          size: width,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollLeftForScrollToColumn(_this2.props);\n          }\n        });\n      }\n\n      if (this._recomputeScrollTopFlag) {\n        this._recomputeScrollTopFlag = false;\n\n        this._updateScrollTopForScrollToRow(this.props);\n      } else {\n        (0, _updateScrollIndexHelper[\"default\"])({\n          cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          previousCellsCount: prevProps.rowCount,\n          previousCellSize: prevProps.rowHeight,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToRow,\n          previousSize: prevProps.height,\n          scrollOffset: scrollTop,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToRow,\n          size: height,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollTopForScrollToRow(_this2.props);\n          }\n        });\n      } // Update onRowsRendered callback if start/stop indices have changed\n\n\n      this._invokeOnGridRenderedHelper(); // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n\n\n      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n        this._invokeOnScrollMemoizer({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          totalColumnsWidth: totalColumnsWidth,\n          totalRowsHeight: totalRowsHeight\n        });\n      }\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._disablePointerEventsTimeoutId);\n      }\n    }\n    /**\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          autoContainerWidth = _this$props6.autoContainerWidth,\n          autoHeight = _this$props6.autoHeight,\n          autoWidth = _this$props6.autoWidth,\n          className = _this$props6.className,\n          containerProps = _this$props6.containerProps,\n          containerRole = _this$props6.containerRole,\n          containerStyle = _this$props6.containerStyle,\n          height = _this$props6.height,\n          id = _this$props6.id,\n          noContentRenderer = _this$props6.noContentRenderer,\n          role = _this$props6.role,\n          style = _this$props6.style,\n          tabIndex = _this$props6.tabIndex,\n          width = _this$props6.width;\n      var _this$state2 = this.state,\n          instanceProps = _this$state2.instanceProps,\n          needToResetStyleCache = _this$state2.needToResetStyleCache;\n\n      var isScrolling = this._isScrolling();\n\n      var gridStyle = {\n        boxSizing: 'border-box',\n        direction: 'ltr',\n        height: autoHeight ? 'auto' : height,\n        position: 'relative',\n        width: autoWidth ? 'auto' : width,\n        WebkitOverflowScrolling: 'touch',\n        willChange: 'transform'\n      };\n\n      if (needToResetStyleCache) {\n        this._styleCache = {};\n      } // calculate _styleCache here\n      // if state.isScrolling (not from _isScrolling) then reset\n\n\n      if (!this.state.isScrolling) {\n        this._resetStyleCache();\n      } // calculate children to render here\n\n\n      this._calculateChildrenToRender(this.props, this.state);\n\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize(); // Force browser to hide scrollbars when we know they aren't necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n\n      var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n      var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {\n        this._horizontalScrollBarSize = horizontalScrollBarSize;\n        this._verticalScrollBarSize = verticalScrollBarSize;\n        this._scrollbarPresenceChanged = true;\n      } // Also explicitly init styles to 'auto' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n\n      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n      var childrenToDisplay = this._childrenToDisplay;\n      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n      return React.createElement(\"div\", (0, _extends2[\"default\"])({\n        ref: this._setScrollingContainerRef\n      }, containerProps, {\n        \"aria-label\": this.props['aria-label'],\n        \"aria-readonly\": this.props['aria-readonly'],\n        className: (0, _clsx[\"default\"])('ReactVirtualized__Grid', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: role,\n        style: _objectSpread({}, gridStyle, {}, style),\n        tabIndex: tabIndex\n      }), childrenToDisplay.length > 0 && React.createElement(\"div\", {\n        className: \"ReactVirtualized__Grid__innerScrollContainer\",\n        role: containerRole,\n        style: _objectSpread({\n          width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative'\n        }, containerStyle)\n      }, childrenToDisplay), showNoContentRenderer && noContentRenderer());\n    }\n    /* ---------------------------- Helper methods ---------------------------- */\n\n  }, {\n    key: \"_calculateChildrenToRender\",\n    value: function _calculateChildrenToRender() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var cellRenderer = props.cellRenderer,\n          cellRangeRenderer = props.cellRangeRenderer,\n          columnCount = props.columnCount,\n          deferredMeasurementCache = props.deferredMeasurementCache,\n          height = props.height,\n          overscanColumnCount = props.overscanColumnCount,\n          overscanIndicesGetter = props.overscanIndicesGetter,\n          overscanRowCount = props.overscanRowCount,\n          rowCount = props.rowCount,\n          width = props.width,\n          isScrollingOptOut = props.isScrollingOptOut;\n      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,\n          scrollDirectionVertical = state.scrollDirectionVertical,\n          instanceProps = state.instanceProps;\n      var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n      var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n      var isScrolling = this._isScrolling(props, state);\n\n      this._childrenToDisplay = []; // Render only enough columns and rows to cover the visible area of the grid.\n\n      if (height > 0 && width > 0) {\n        var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n          containerSize: height,\n          offset: scrollTop\n        });\n        var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: height,\n          offset: scrollTop\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        this._renderedColumnStartIndex = visibleColumnIndices.start;\n        this._renderedColumnStopIndex = visibleColumnIndices.stop;\n        this._renderedRowStartIndex = visibleRowIndices.start;\n        this._renderedRowStopIndex = visibleRowIndices.stop;\n        var overscanColumnIndices = overscanIndicesGetter({\n          direction: 'horizontal',\n          cellCount: columnCount,\n          overscanCellsCount: overscanColumnCount,\n          scrollDirection: scrollDirectionHorizontal,\n          startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n          stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n        });\n        var overscanRowIndices = overscanIndicesGetter({\n          direction: 'vertical',\n          cellCount: rowCount,\n          overscanCellsCount: overscanRowCount,\n          scrollDirection: scrollDirectionVertical,\n          startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n          stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        var columnStartIndex = overscanColumnIndices.overscanStartIndex;\n        var columnStopIndex = overscanColumnIndices.overscanStopIndex;\n        var rowStartIndex = overscanRowIndices.overscanStartIndex;\n        var rowStopIndex = overscanRowIndices.overscanStopIndex; // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n\n        if (deferredMeasurementCache) {\n          // If rows have a dynamic height, scan the rows we are about to render.\n          // If any have not yet been measured, then we need to render all columns initially,\n          // Because the height of the row is equal to the tallest cell within that row,\n          // (And so we can't know the height without measuring all column-cells first).\n          if (!deferredMeasurementCache.hasFixedHeight()) {\n            for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n              if (!deferredMeasurementCache.has(rowIndex, 0)) {\n                columnStartIndex = 0;\n                columnStopIndex = columnCount - 1;\n                break;\n              }\n            }\n          } // If columns have a dynamic width, scan the columns we are about to render.\n          // If any have not yet been measured, then we need to render all rows initially,\n          // Because the width of the column is equal to the widest cell within that column,\n          // (And so we can't know the width without measuring all row-cells first).\n\n\n          if (!deferredMeasurementCache.hasFixedWidth()) {\n            for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n              if (!deferredMeasurementCache.has(0, columnIndex)) {\n                rowStartIndex = 0;\n                rowStopIndex = rowCount - 1;\n                break;\n              }\n            }\n          }\n        }\n\n        this._childrenToDisplay = cellRangeRenderer({\n          cellCache: this._cellCache,\n          cellRenderer: cellRenderer,\n          columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          columnStartIndex: columnStartIndex,\n          columnStopIndex: columnStopIndex,\n          deferredMeasurementCache: deferredMeasurementCache,\n          horizontalOffsetAdjustment: horizontalOffsetAdjustment,\n          isScrolling: isScrolling,\n          isScrollingOptOut: isScrollingOptOut,\n          parent: this,\n          rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          rowStartIndex: rowStartIndex,\n          rowStopIndex: rowStopIndex,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          styleCache: this._styleCache,\n          verticalOffsetAdjustment: verticalOffsetAdjustment,\n          visibleColumnIndices: visibleColumnIndices,\n          visibleRowIndices: visibleRowIndices\n        }); // update the indices\n\n        this._columnStartIndex = columnStartIndex;\n        this._columnStopIndex = columnStopIndex;\n        this._rowStartIndex = rowStartIndex;\n        this._rowStopIndex = rowStopIndex;\n      }\n    }\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Grid.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n\n  }, {\n    key: \"_debounceScrollEnded\",\n    value: function _debounceScrollEnded() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n\n      if (this._disablePointerEventsTimeoutId) {\n        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._disablePointerEventsTimeoutId);\n      }\n\n      this._disablePointerEventsTimeoutId = (0, _requestAnimationTimeout.requestAnimationTimeout)(this._debounceScrollEndedCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: \"_handleInvalidatedGridSize\",\n\n    /**\n     * Check for batched CellMeasurer size invalidations.\n     * This will occur the first time one or more previously unmeasured cells are rendered.\n     */\n    value: function _handleInvalidatedGridSize() {\n      if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {\n        var columnIndex = this._deferredInvalidateColumnIndex;\n        var rowIndex = this._deferredInvalidateRowIndex;\n        this._deferredInvalidateColumnIndex = null;\n        this._deferredInvalidateRowIndex = null;\n        this.recomputeGridSize({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        });\n      }\n    }\n  }, {\n    key: \"_invokeOnScrollMemoizer\",\n    value: function _invokeOnScrollMemoizer(_ref6) {\n      var _this3 = this;\n\n      var scrollLeft = _ref6.scrollLeft,\n          scrollTop = _ref6.scrollTop,\n          totalColumnsWidth = _ref6.totalColumnsWidth,\n          totalRowsHeight = _ref6.totalRowsHeight;\n\n      this._onScrollMemoizer({\n        callback: function callback(_ref7) {\n          var scrollLeft = _ref7.scrollLeft,\n              scrollTop = _ref7.scrollTop;\n          var _this3$props = _this3.props,\n              height = _this3$props.height,\n              onScroll = _this3$props.onScroll,\n              width = _this3$props.width;\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalRowsHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalColumnsWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: \"_isScrolling\",\n    value: function _isScrolling() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      // If isScrolling is defined in props, use it to override the value in state\n      // This is a performance optimization for WindowScroller + Grid\n      return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n    }\n  }, {\n    key: \"_maybeCallOnScrollbarPresenceChange\",\n    value: function _maybeCallOnScrollbarPresenceChange() {\n      if (this._scrollbarPresenceChanged) {\n        var onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;\n        this._scrollbarPresenceChanged = false;\n        onScrollbarPresenceChange({\n          horizontal: this._horizontalScrollBarSize > 0,\n          size: this.state.instanceProps.scrollbarSize,\n          vertical: this._verticalScrollBarSize > 0\n        });\n      }\n    }\n  }, {\n    key: \"scrollToPosition\",\n\n    /**\n     * Scroll to the specified offset(s).\n     * Useful for animating position changes.\n     */\n    value: function scrollToPosition(_ref8) {\n      var scrollLeft = _ref8.scrollLeft,\n          scrollTop = _ref8.scrollTop;\n\n      var stateUpdate = Grid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollLeft(props, state);\n    }\n  }, {\n    key: \"_updateScrollLeftForScrollToColumn\",\n    value: function _updateScrollLeftForScrollToColumn() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollTop(props, state);\n    }\n  }, {\n    key: \"_resetStyleCache\",\n    value: function _resetStyleCache() {\n      var styleCache = this._styleCache;\n      var cellCache = this._cellCache;\n      var isScrollingOptOut = this.props.isScrollingOptOut; // Reset cell and style caches once scrolling stops.\n      // This makes Grid simpler to use (since cells commonly change).\n      // And it keeps the caches from growing too large.\n      // Performance is most sensitive when a user is scrolling.\n      // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n      // This keeps the cellCache to a resonable size.\n\n      this._cellCache = {};\n      this._styleCache = {}; // Copy over the visible cell styles so avoid unnecessary re-render.\n\n      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n          var key = \"\".concat(rowIndex, \"-\").concat(columnIndex);\n          this._styleCache[key] = styleCache[key];\n\n          if (isScrollingOptOut) {\n            this._cellCache[key] = cellCache[key];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_updateScrollTopForScrollToRow\",\n    value: function _updateScrollTopForScrollToRow() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = {};\n\n      if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {\n        newState.scrollLeft = 0;\n        newState.scrollTop = 0; // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n        // scrollTo{Column,Row} should override scroll{Left,Top}\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {\n        Object.assign(newState, Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        }));\n      }\n\n      var instanceProps = prevState.instanceProps; // Initially we should not clearStyleCache\n\n      newState.needToResetStyleCache = false;\n\n      if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {\n        // Reset cache. set it to {} in render\n        newState.needToResetStyleCache = true;\n      }\n\n      instanceProps.columnSizeAndPositionManager.configure({\n        cellCount: nextProps.columnCount,\n        estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)\n      });\n      instanceProps.rowSizeAndPositionManager.configure({\n        cellCount: nextProps.rowCount,\n        estimatedCellSize: Grid._getEstimatedRowSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)\n      });\n\n      if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n        instanceProps.prevColumnCount = 0;\n        instanceProps.prevRowCount = 0;\n      } // If scrolling is controlled outside this component, clear cache when scrolling stops\n\n\n      if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n        Object.assign(newState, {\n          isScrolling: false\n        });\n      }\n\n      var maybeStateA;\n      var maybeStateB;\n      (0, _calculateSizeAndPositionDataAndUpdateScrollOffset[\"default\"])({\n        cellCount: instanceProps.prevColumnCount,\n        cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.columnSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.columnCount,\n        nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n        nextScrollToIndex: nextProps.scrollToColumn,\n        scrollToIndex: instanceProps.prevScrollToColumn,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n        }\n      });\n      (0, _calculateSizeAndPositionDataAndUpdateScrollOffset[\"default\"])({\n        cellCount: instanceProps.prevRowCount,\n        cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.rowSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.rowCount,\n        nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n        nextScrollToIndex: nextProps.scrollToRow,\n        scrollToIndex: instanceProps.prevScrollToRow,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n        }\n      });\n      instanceProps.prevColumnCount = nextProps.columnCount;\n      instanceProps.prevColumnWidth = nextProps.columnWidth;\n      instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n      instanceProps.prevRowCount = nextProps.rowCount;\n      instanceProps.prevRowHeight = nextProps.rowHeight;\n      instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n      instanceProps.prevScrollToRow = nextProps.scrollToRow; // getting scrollBarSize (moved from componentWillMount)\n\n      instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n\n      if (instanceProps.scrollbarSize === undefined) {\n        instanceProps.scrollbarSizeMeasured = false;\n        instanceProps.scrollbarSize = 0;\n      } else {\n        instanceProps.scrollbarSizeMeasured = true;\n      }\n\n      newState.instanceProps = instanceProps;\n      return _objectSpread({}, newState, {}, maybeStateA, {}, maybeStateB);\n    }\n  }, {\n    key: \"_getEstimatedColumnSize\",\n    value: function _getEstimatedColumnSize(props) {\n      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n    }\n  }, {\n    key: \"_getEstimatedRowSize\",\n    value: function _getEstimatedRowSize(props) {\n      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n    }\n  }, {\n    key: \"_getScrollToPositionStateUpdate\",\n\n    /**\n     * Get the updated state after scrolling to\n     * scrollLeft and scrollTop\n     */\n    value: function _getScrollToPositionStateUpdate(_ref9) {\n      var prevState = _ref9.prevState,\n          scrollLeft = _ref9.scrollLeft,\n          scrollTop = _ref9.scrollTop;\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n        newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD;\n        newState.scrollLeft = scrollLeft;\n      }\n\n      if (typeof scrollTop === 'number' && scrollTop >= 0) {\n        newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD;\n        newState.scrollTop = scrollTop;\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {\n        return newState;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"_wrapSizeGetter\",\n    value: function _wrapSizeGetter(value) {\n      return typeof value === 'function' ? value : function () {\n        return value;\n      };\n    }\n  }, {\n    key: \"_getCalculatedScrollLeft\",\n    value: function _getCalculatedScrollLeft(nextProps, prevState) {\n      var columnCount = nextProps.columnCount,\n          height = nextProps.height,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToColumn = nextProps.scrollToColumn,\n          width = nextProps.width;\n      var scrollLeft = prevState.scrollLeft,\n          instanceProps = prevState.instanceProps;\n\n      if (columnCount > 0) {\n        var finalColumn = columnCount - 1;\n        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n        return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: width - scrollBarSize,\n          currentOffset: scrollLeft,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_getScrollLeftForScrollToColumnStateUpdate\",\n    value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {\n      var scrollLeft = prevState.scrollLeft;\n\n      var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);\n\n      if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: -1\n        });\n      }\n\n      return {};\n    }\n  }, {\n    key: \"_getCalculatedScrollTop\",\n    value: function _getCalculatedScrollTop(nextProps, prevState) {\n      var height = nextProps.height,\n          rowCount = nextProps.rowCount,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToRow = nextProps.scrollToRow,\n          width = nextProps.width;\n      var scrollTop = prevState.scrollTop,\n          instanceProps = prevState.instanceProps;\n\n      if (rowCount > 0) {\n        var finalRow = rowCount - 1;\n        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n        return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: height - scrollBarSize,\n          currentOffset: scrollTop,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"_getScrollTopForScrollToRowStateUpdate\",\n    value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {\n      var scrollTop = prevState.scrollTop;\n\n      var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);\n\n      if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: -1,\n          scrollTop: calculatedScrollTop\n        });\n      }\n\n      return {};\n    }\n  }]);\n  return Grid;\n}(React.PureComponent), (0, _defineProperty2[\"default\"])(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": _propTypes[\"default\"].string.isRequired,\n  \"aria-readonly\": _propTypes[\"default\"].bool,\n\n  /**\n   * Set the width of the inner scrollable container to 'auto'.\n   * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.\n   */\n  \"autoContainerWidth\": _propTypes[\"default\"].bool.isRequired,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoHeight\": _propTypes[\"default\"].bool.isRequired,\n\n  /**\n   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  \"autoWidth\": _propTypes[\"default\"].bool.isRequired,\n\n  /** Responsible for rendering a cell given an row and column index.  */\n  \"cellRenderer\": function cellRenderer() {\n    return (typeof _types.bpfrpt_proptype_CellRenderer === \"function\" ? _types.bpfrpt_proptype_CellRenderer.isRequired ? _types.bpfrpt_proptype_CellRenderer.isRequired : _types.bpfrpt_proptype_CellRenderer : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_CellRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a group of cells given their index ranges.  */\n  \"cellRangeRenderer\": function cellRangeRenderer() {\n    return (typeof _types.bpfrpt_proptype_CellRangeRenderer === \"function\" ? _types.bpfrpt_proptype_CellRangeRenderer.isRequired ? _types.bpfrpt_proptype_CellRangeRenderer.isRequired : _types.bpfrpt_proptype_CellRangeRenderer : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_CellRangeRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Optional custom CSS class name to attach to root Grid element.  */\n  \"className\": _propTypes[\"default\"].string,\n\n  /** Number of columns in grid.  */\n  \"columnCount\": _propTypes[\"default\"].number.isRequired,\n\n  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */\n  \"columnWidth\": function columnWidth() {\n    return (typeof _types.bpfrpt_proptype_CellSize === \"function\" ? _types.bpfrpt_proptype_CellSize.isRequired ? _types.bpfrpt_proptype_CellSize.isRequired : _types.bpfrpt_proptype_CellSize : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Unfiltered props for the Grid container. */\n  \"containerProps\": _propTypes[\"default\"].object,\n\n  /** ARIA role for the cell-container.  */\n  \"containerRole\": _propTypes[\"default\"].string.isRequired,\n\n  /** Optional inline style applied to inner cell-container */\n  \"containerStyle\": _propTypes[\"default\"].object.isRequired,\n\n  /**\n   * If CellMeasurer is used to measure this Grid's children, this should be a pointer to its CellMeasurerCache.\n   * A shared CellMeasurerCache reference enables Grid and CellMeasurer to share measurement data.\n   */\n  \"deferredMeasurementCache\": _propTypes[\"default\"].object,\n\n  /**\n   * Used to estimate the total width of a Grid before all of its columns have actually been measured.\n   * The estimated total width is adjusted as columns are rendered.\n   */\n  \"estimatedColumnSize\": _propTypes[\"default\"].number.isRequired,\n\n  /**\n   * Used to estimate the total height of a Grid before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": _propTypes[\"default\"].number.isRequired,\n\n  /** Exposed for testing purposes only.  */\n  \"getScrollbarSize\": _propTypes[\"default\"].func.isRequired,\n\n  /** Height of Grid; this property determines the number of visible (vs virtualized) rows.  */\n  \"height\": _propTypes[\"default\"].number.isRequired,\n\n  /** Optional custom id to attach to root Grid element.  */\n  \"id\": _propTypes[\"default\"].string,\n\n  /**\n   * Override internal is-scrolling state tracking.\n   * This property is primarily intended for use with the WindowScroller component.\n   */\n  \"isScrolling\": _propTypes[\"default\"].bool,\n\n  /**\n   * Opt-out of isScrolling param passed to cellRangeRenderer.\n   * To avoid the extra render when scroll stops.\n   */\n  \"isScrollingOptOut\": _propTypes[\"default\"].bool.isRequired,\n\n  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */\n  \"noContentRenderer\": function noContentRenderer() {\n    return (typeof _types.bpfrpt_proptype_NoContentRenderer === \"function\" ? _types.bpfrpt_proptype_NoContentRenderer.isRequired ? _types.bpfrpt_proptype_NoContentRenderer.isRequired : _types.bpfrpt_proptype_NoContentRenderer : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": _propTypes[\"default\"].func.isRequired,\n\n  /**\n   * Called whenever a horizontal or vertical scrollbar is added or removed.\n   * This prop is not intended for end-user use;\n   * It is used by MultiGrid to support fixed-row/fixed-column scroll syncing.\n   */\n  \"onScrollbarPresenceChange\": _propTypes[\"default\"].func.isRequired,\n\n  /** Callback invoked with information about the section of the Grid that was just rendered.  */\n  \"onSectionRendered\": _propTypes[\"default\"].func.isRequired,\n\n  /**\n   * Number of columns to render before/after the visible section of the grid.\n   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanColumnCount\": _propTypes[\"default\"].number.isRequired,\n\n  /**\n   * Calculates the number of cells to overscan before and after a specified range.\n   * This function ensures that overscanning doesn't exceed the available cells.\n   */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof _types.bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? _types.bpfrpt_proptype_OverscanIndicesGetter.isRequired ? _types.bpfrpt_proptype_OverscanIndicesGetter.isRequired : _types.bpfrpt_proptype_OverscanIndicesGetter : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible section of the grid.\n   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  \"overscanRowCount\": _propTypes[\"default\"].number.isRequired,\n\n  /** ARIA role for the grid element.  */\n  \"role\": _propTypes[\"default\"].string.isRequired,\n\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * Should implement the following interface: ({ index: number }): number\n   */\n  \"rowHeight\": function rowHeight() {\n    return (typeof _types.bpfrpt_proptype_CellSize === \"function\" ? _types.bpfrpt_proptype_CellSize.isRequired ? _types.bpfrpt_proptype_CellSize.isRequired : _types.bpfrpt_proptype_CellSize : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in grid.  */\n  \"rowCount\": _propTypes[\"default\"].number.isRequired,\n\n  /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */\n  \"scrollingResetTimeInterval\": _propTypes[\"default\"].number.isRequired,\n\n  /** Horizontal offset. */\n  \"scrollLeft\": _propTypes[\"default\"].number,\n\n  /**\n   * Controls scroll-to-cell behavior of the Grid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the Grid and \"end\" to align bottom/right.\n   */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof _types.bpfrpt_proptype_Alignment === \"function\" ? _types.bpfrpt_proptype_Alignment.isRequired ? _types.bpfrpt_proptype_Alignment.isRequired : _types.bpfrpt_proptype_Alignment : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Column index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToColumn\": _propTypes[\"default\"].number.isRequired,\n\n  /** Vertical offset. */\n  \"scrollTop\": _propTypes[\"default\"].number,\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToRow\": _propTypes[\"default\"].number.isRequired,\n\n  /** Optional inline style */\n  \"style\": _propTypes[\"default\"].object.isRequired,\n\n  /** Tab index for focus */\n  \"tabIndex\": _propTypes[\"default\"].number,\n\n  /** Width of Grid; this property determines the number of visible (vs virtualized) columns.  */\n  \"width\": _propTypes[\"default\"].number.isRequired\n}), _temp);\n(0, _defineProperty2[\"default\"])(Grid, \"defaultProps\", {\n  'aria-label': 'grid',\n  'aria-readonly': true,\n  autoContainerWidth: false,\n  autoHeight: false,\n  autoWidth: false,\n  cellRangeRenderer: _defaultCellRangeRenderer[\"default\"],\n  containerRole: 'rowgroup',\n  containerStyle: {},\n  estimatedColumnSize: 100,\n  estimatedRowSize: 30,\n  getScrollbarSize: _scrollbarSize[\"default\"],\n  noContentRenderer: renderNull,\n  onScroll: function onScroll() {},\n  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},\n  onSectionRendered: function onSectionRendered() {},\n  overscanColumnCount: 0,\n  overscanIndicesGetter: _defaultOverscanIndicesGetter[\"default\"],\n  overscanRowCount: 10,\n  role: 'grid',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  scrollToAlignment: 'auto',\n  scrollToColumn: -1,\n  scrollToRow: -1,\n  style: {},\n  tabIndex: 0,\n  isScrollingOptOut: false\n});\n(0, _reactLifecyclesCompat.polyfill)(Grid);\nvar _default = Grid;\nexports[\"default\"] = _default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = defaultOverscanIndicesGetter;\nexports.SCROLL_DIRECTION_VERTICAL = exports.SCROLL_DIRECTION_HORIZONTAL = exports.SCROLL_DIRECTION_FORWARD = exports.SCROLL_DIRECTION_BACKWARD = void 0;\n\nvar _types = require(\"./types\");\n\nvar SCROLL_DIRECTION_BACKWARD = -1;\nexports.SCROLL_DIRECTION_BACKWARD = SCROLL_DIRECTION_BACKWARD;\nvar SCROLL_DIRECTION_FORWARD = 1;\nexports.SCROLL_DIRECTION_FORWARD = SCROLL_DIRECTION_FORWARD;\nvar SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexports.SCROLL_DIRECTION_HORIZONTAL = SCROLL_DIRECTION_HORIZONTAL;\nvar SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexports.SCROLL_DIRECTION_VERTICAL = SCROLL_DIRECTION_VERTICAL;\n\nfunction defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n  // Make sure we render at least 1 cell extra before and after (except near boundaries)\n  // This is necessary in order to support keyboard navigation (TAB/SHIFT+TAB) in some cases\n  // For more info see issues #625\n  overscanCellsCount = Math.max(1, overscanCellsCount);\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - 1),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + 1)\n    };\n  }\n}", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function get() {\n    return _Grid[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"Grid\", {\n  enumerable: true,\n  get: function get() {\n    return _Grid[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"accessibilityOverscanIndicesGetter\", {\n  enumerable: true,\n  get: function get() {\n    return _accessibilityOverscanIndicesGetter[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"defaultCellRangeRenderer\", {\n  enumerable: true,\n  get: function get() {\n    return _defaultCellRangeRenderer[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"defaultOverscanIndicesGetter\", {\n  enumerable: true,\n  get: function get() {\n    return _defaultOverscanIndicesGetter[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_NoContentRenderer\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_NoContentRenderer;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_Alignment\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_Alignment;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_CellPosition\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_CellPosition;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_CellSize\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_CellSize;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_OverscanIndicesGetter\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_OverscanIndicesGetter;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_RenderedSection\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_RenderedSection;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_CellRendererParams\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_CellRendererParams;\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_Scroll\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_Scroll;\n  }\n});\n\nvar _Grid = _interopRequireDefault(require(\"./Grid\"));\n\nvar _accessibilityOverscanIndicesGetter = _interopRequireDefault(require(\"./accessibilityOverscanIndicesGetter\"));\n\nvar _defaultCellRangeRenderer = _interopRequireDefault(require(\"./defaultCellRangeRenderer\"));\n\nvar _defaultOverscanIndicesGetter = _interopRequireDefault(require(\"./defaultOverscanIndicesGetter\"));\n\nvar _types = require(\"./types\");", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bpfrpt_proptype_Scroll = exports.bpfrpt_proptype_RenderedRows = exports.bpfrpt_proptype_RowRenderer = exports.bpfrpt_proptype_RowRendererParams = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar bpfrpt_proptype_RowRendererParams = process.env.NODE_ENV === 'production' ? null : {\n  \"index\": _propTypes[\"default\"].number.isRequired,\n  \"isScrolling\": _propTypes[\"default\"].bool.isRequired,\n  \"isVisible\": _propTypes[\"default\"].bool.isRequired,\n  \"key\": _propTypes[\"default\"].string.isRequired,\n  \"parent\": _propTypes[\"default\"].object.isRequired,\n  \"style\": _propTypes[\"default\"].object.isRequired\n};\nexports.bpfrpt_proptype_RowRendererParams = bpfrpt_proptype_RowRendererParams;\nvar bpfrpt_proptype_RowRenderer = process.env.NODE_ENV === 'production' ? null : _propTypes[\"default\"].func;\nexports.bpfrpt_proptype_RowRenderer = bpfrpt_proptype_RowRenderer;\nvar bpfrpt_proptype_RenderedRows = process.env.NODE_ENV === 'production' ? null : {\n  \"overscanStartIndex\": _propTypes[\"default\"].number.isRequired,\n  \"overscanStopIndex\": _propTypes[\"default\"].number.isRequired,\n  \"startIndex\": _propTypes[\"default\"].number.isRequired,\n  \"stopIndex\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_RenderedRows = bpfrpt_proptype_RenderedRows;\nvar bpfrpt_proptype_Scroll = process.env.NODE_ENV === 'production' ? null : {\n  \"clientHeight\": _propTypes[\"default\"].number.isRequired,\n  \"scrollHeight\": _propTypes[\"default\"].number.isRequired,\n  \"scrollTop\": _propTypes[\"default\"].number.isRequired\n};\nexports.bpfrpt_proptype_Scroll = bpfrpt_proptype_Scroll;", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _Grid = _interopRequireWildcard(require(\"../Grid\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _types = require(\"./types\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _class, _temp;\n\nvar List = (_temp = _class =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  (0, _inherits2[\"default\"])(List, _React$PureComponent);\n\n  function List() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, List);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3[\"default\"])(List)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"Grid\", void 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_cellRenderer\", function (_ref) {\n      var parent = _ref.parent,\n          rowIndex = _ref.rowIndex,\n          style = _ref.style,\n          isScrolling = _ref.isScrolling,\n          isVisible = _ref.isVisible,\n          key = _ref.key;\n      var rowRenderer = _this.props.rowRenderer; // TRICKY The style object is sometimes cached by Grid.\n      // This prevents new style objects from bypassing shallowCompare().\n      // However as of React 16, style props are auto-frozen (at least in dev mode)\n      // Check to make sure we can still modify the style before proceeding.\n      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713\n\n      var widthDescriptor = Object.getOwnPropertyDescriptor(style, 'width');\n\n      if (widthDescriptor && widthDescriptor.writable) {\n        // By default, List cells should be 100% width.\n        // This prevents them from flowing under a scrollbar (if present).\n        style.width = '100%';\n      }\n\n      return rowRenderer({\n        index: rowIndex,\n        style: style,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_setRef\", function (ref) {\n      _this.Grid = ref;\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onScroll\", function (_ref2) {\n      var clientHeight = _ref2.clientHeight,\n          scrollHeight = _ref2.scrollHeight,\n          scrollTop = _ref2.scrollTop;\n      var onScroll = _this.props.onScroll;\n      onScroll({\n        clientHeight: clientHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_onSectionRendered\", function (_ref3) {\n      var rowOverscanStartIndex = _ref3.rowOverscanStartIndex,\n          rowOverscanStopIndex = _ref3.rowOverscanStopIndex,\n          rowStartIndex = _ref3.rowStartIndex,\n          rowStopIndex = _ref3.rowStopIndex;\n      var onRowsRendered = _this.props.onRowsRendered;\n      onRowsRendered({\n        overscanStartIndex: rowOverscanStartIndex,\n        overscanStopIndex: rowOverscanStopIndex,\n        startIndex: rowStartIndex,\n        stopIndex: rowStopIndex\n      });\n    });\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(List, [{\n    key: \"forceUpdateGrid\",\n    value: function forceUpdateGrid() {\n      if (this.Grid) {\n        this.Grid.forceUpdate();\n      }\n    }\n    /** See Grid#getOffsetForCell */\n\n  }, {\n    key: \"getOffsetForRow\",\n    value: function getOffsetForRow(_ref4) {\n      var alignment = _ref4.alignment,\n          index = _ref4.index;\n\n      if (this.Grid) {\n        var _this$Grid$getOffsetF = this.Grid.getOffsetForCell({\n          alignment: alignment,\n          rowIndex: index,\n          columnIndex: 0\n        }),\n            scrollTop = _this$Grid$getOffsetF.scrollTop;\n\n        return scrollTop;\n      }\n\n      return 0;\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"invalidateCellSizeAfterRender\",\n    value: function invalidateCellSizeAfterRender(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n\n      if (this.Grid) {\n        this.Grid.invalidateCellSizeAfterRender({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#measureAllCells */\n\n  }, {\n    key: \"measureAllRows\",\n    value: function measureAllRows() {\n      if (this.Grid) {\n        this.Grid.measureAllCells();\n      }\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: \"recomputeGridSize\",\n    value: function recomputeGridSize() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$columnIndex = _ref6.columnIndex,\n          columnIndex = _ref6$columnIndex === void 0 ? 0 : _ref6$columnIndex,\n          _ref6$rowIndex = _ref6.rowIndex,\n          rowIndex = _ref6$rowIndex === void 0 ? 0 : _ref6$rowIndex;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#recomputeGridSize */\n\n  }, {\n    key: \"recomputeRowHeights\",\n    value: function recomputeRowHeights() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: index,\n          columnIndex: 0\n        });\n      }\n    }\n    /** See Grid#scrollToPosition */\n\n  }, {\n    key: \"scrollToPosition\",\n    value: function scrollToPosition() {\n      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToPosition({\n          scrollTop: scrollTop\n        });\n      }\n    }\n    /** See Grid#scrollToCell */\n\n  }, {\n    key: \"scrollToRow\",\n    value: function scrollToRow() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToCell({\n          columnIndex: 0,\n          rowIndex: index\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          noRowsRenderer = _this$props.noRowsRenderer,\n          scrollToIndex = _this$props.scrollToIndex,\n          width = _this$props.width;\n      var classNames = (0, _clsx[\"default\"])('ReactVirtualized__List', className);\n      return React.createElement(_Grid[\"default\"], (0, _extends2[\"default\"])({}, this.props, {\n        autoContainerWidth: true,\n        cellRenderer: this._cellRenderer,\n        className: classNames,\n        columnWidth: width,\n        columnCount: 1,\n        noContentRenderer: noRowsRenderer,\n        onScroll: this._onScroll,\n        onSectionRendered: this._onSectionRendered,\n        ref: this._setRef,\n        scrollToRow: scrollToIndex\n      }));\n    }\n  }]);\n  return List;\n}(React.PureComponent), (0, _defineProperty2[\"default\"])(_class, \"propTypes\", process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": _propTypes[\"default\"].string,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   */\n  \"autoHeight\": _propTypes[\"default\"].bool.isRequired,\n\n  /** Optional CSS class name */\n  \"className\": _propTypes[\"default\"].string,\n\n  /**\n   * Used to estimate the total height of a List before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  \"estimatedRowSize\": _propTypes[\"default\"].number.isRequired,\n\n  /** Height constraint for list (determines how many actual rows are rendered) */\n  \"height\": _propTypes[\"default\"].number.isRequired,\n\n  /** Optional renderer to be used in place of rows when rowCount is 0 */\n  \"noRowsRenderer\": function noRowsRenderer() {\n    return (typeof _Grid.bpfrpt_proptype_NoContentRenderer === \"function\" ? _Grid.bpfrpt_proptype_NoContentRenderer.isRequired ? _Grid.bpfrpt_proptype_NoContentRenderer.isRequired : _Grid.bpfrpt_proptype_NoContentRenderer : _propTypes[\"default\"].shape(_Grid.bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Callback invoked with information about the slice of rows that were just rendered.  */\n  \"onRowsRendered\": _propTypes[\"default\"].func.isRequired,\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  \"onScroll\": _propTypes[\"default\"].func.isRequired,\n\n  /** See Grid#overscanIndicesGetter */\n  \"overscanIndicesGetter\": function overscanIndicesGetter() {\n    return (typeof _Grid.bpfrpt_proptype_OverscanIndicesGetter === \"function\" ? _Grid.bpfrpt_proptype_OverscanIndicesGetter.isRequired ? _Grid.bpfrpt_proptype_OverscanIndicesGetter.isRequired : _Grid.bpfrpt_proptype_OverscanIndicesGetter : _propTypes[\"default\"].shape(_Grid.bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list.\n   * These rows can help for smoother scrolling on touch devices.\n   */\n  \"overscanRowCount\": _propTypes[\"default\"].number.isRequired,\n\n  /** Either a fixed row height (number) or a function that returns the height of a row given its index.  */\n  \"rowHeight\": function rowHeight() {\n    return (typeof _Grid.bpfrpt_proptype_CellSize === \"function\" ? _Grid.bpfrpt_proptype_CellSize.isRequired ? _Grid.bpfrpt_proptype_CellSize.isRequired : _Grid.bpfrpt_proptype_CellSize : _propTypes[\"default\"].shape(_Grid.bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a row given an index; ({ index: number }): node */\n  \"rowRenderer\": function rowRenderer() {\n    return (typeof _types.bpfrpt_proptype_RowRenderer === \"function\" ? _types.bpfrpt_proptype_RowRenderer.isRequired ? _types.bpfrpt_proptype_RowRenderer.isRequired : _types.bpfrpt_proptype_RowRenderer : _propTypes[\"default\"].shape(_types.bpfrpt_proptype_RowRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in list. */\n  \"rowCount\": _propTypes[\"default\"].number.isRequired,\n\n  /** See Grid#scrollToAlignment */\n  \"scrollToAlignment\": function scrollToAlignment() {\n    return (typeof _Grid.bpfrpt_proptype_Alignment === \"function\" ? _Grid.bpfrpt_proptype_Alignment.isRequired ? _Grid.bpfrpt_proptype_Alignment.isRequired : _Grid.bpfrpt_proptype_Alignment : _propTypes[\"default\"].shape(_Grid.bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  \"scrollToIndex\": _propTypes[\"default\"].number.isRequired,\n\n  /** Vertical offset. */\n  \"scrollTop\": _propTypes[\"default\"].number,\n\n  /** Optional inline style */\n  \"style\": _propTypes[\"default\"].object.isRequired,\n\n  /** Tab index for focus */\n  \"tabIndex\": _propTypes[\"default\"].number,\n\n  /** Width of list */\n  \"width\": _propTypes[\"default\"].number.isRequired\n}), _temp);\nexports[\"default\"] = List;\n(0, _defineProperty2[\"default\"])(List, \"defaultProps\", {\n  autoHeight: false,\n  estimatedRowSize: 30,\n  onScroll: function onScroll() {},\n  noRowsRenderer: function noRowsRenderer() {\n    return null;\n  },\n  onRowsRendered: function onRowsRendered() {},\n  overscanIndicesGetter: _Grid.accessibilityOverscanIndicesGetter,\n  overscanRowCount: 10,\n  scrollToAlignment: 'auto',\n  scrollToIndex: -1,\n  style: {}\n});", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function get() {\n    return _List[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"List\", {\n  enumerable: true,\n  get: function get() {\n    return _List[\"default\"];\n  }\n});\nObject.defineProperty(exports, \"bpfrpt_proptype_RowRendererParams\", {\n  enumerable: true,\n  get: function get() {\n    return _types.bpfrpt_proptype_RowRendererParams;\n  }\n});\n\nvar _List = _interopRequireDefault(require(\"./List\"));\n\nvar _types = require(\"./types\");"],
  "mappings": "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",
  "names": ["CellSizeAndPositionManager", "size", "isBrowser", "isChrome", "getMaxElementSize", "ScalingCellSizeAndPositionManager", "size", "cancelAnimationTimeout", "requestAnimationTimeout", "timeout", "renderNull", "Grid", "scrollbarSize", "stateUpdate", "scrollLeft", "scrollTop", "require_Grid", "require_types", "List", "require_List"]
}
